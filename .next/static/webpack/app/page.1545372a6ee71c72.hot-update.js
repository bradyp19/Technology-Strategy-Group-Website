"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/operate/BlueprintMicroGrid.tsx":
/*!***************************************************!*\
  !*** ./components/operate/BlueprintMicroGrid.tsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlueprintMicroGrid: function() { return /* binding */ BlueprintMicroGrid; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ BlueprintMicroGrid auto */ \nvar _s = $RefreshSig$();\n\nfunction BlueprintMicroGrid(param) {\n    let { className = \"\", opacity = 0.15, parallaxOffset = 2, spacing = 20 } = param;\n    _s();\n    const [scrollY, setScrollY] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleScroll = ()=>{\n            if (containerRef.current) {\n                const rect = containerRef.current.getBoundingClientRect();\n                const elementTop = rect.top;\n                const elementHeight = rect.height;\n                const windowHeight = window.innerHeight;\n                // Only animate when element is in viewport\n                if (elementTop < windowHeight && elementTop + elementHeight > 0) {\n                    const progress = Math.max(0, Math.min(1, (windowHeight - elementTop) / (windowHeight + elementHeight)));\n                    setScrollY(progress * parallaxOffset);\n                }\n            }\n        };\n        // Throttle scroll events\n        let ticking = false;\n        const throttledScroll = ()=>{\n            if (!ticking) {\n                requestAnimationFrame(()=>{\n                    handleScroll();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        };\n        window.addEventListener(\"scroll\", throttledScroll, {\n            passive: true\n        });\n        return ()=>window.removeEventListener(\"scroll\", throttledScroll);\n    }, [\n        parallaxOffset\n    ]);\n    // Generate traditional blueprint pattern\n    const generateBlueprintPattern = ()=>{\n        const elements = [];\n        // Fine grid (small squares)\n        const fineSpacing = spacing / 4;\n        const fineCols = Math.ceil(1200 / fineSpacing);\n        const fineRows = Math.ceil(800 / fineSpacing);\n        // Fine vertical lines\n        for(let i = 0; i <= fineCols; i++){\n            elements.push(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"line\", {\n                x1: i * fineSpacing,\n                y1: 0,\n                x2: i * fineSpacing,\n                y2: 800,\n                stroke: \"currentColor\",\n                strokeWidth: \"0.5\",\n                opacity: opacity * 0.4\n            }, \"fine-v-\".concat(i), false, {\n                fileName: \"/Users/brady/Code/tsg/Technology-Strategy-Group-Website/components/operate/BlueprintMicroGrid.tsx\",\n                lineNumber: 65,\n                columnNumber: 9\n            }, this));\n        }\n        // Fine horizontal lines\n        for(let i = 0; i <= fineRows; i++){\n            elements.push(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"line\", {\n                x1: 0,\n                y1: i * fineSpacing + scrollY,\n                x2: 1200,\n                y2: i * fineSpacing + scrollY,\n                stroke: \"currentColor\",\n                strokeWidth: \"0.5\",\n                opacity: opacity * 0.4\n            }, \"fine-h-\".concat(i), false, {\n                fileName: \"/Users/brady/Code/tsg/Technology-Strategy-Group-Website/components/operate/BlueprintMicroGrid.tsx\",\n                lineNumber: 81,\n                columnNumber: 9\n            }, this));\n        }\n        // Major grid (larger squares with thicker lines)\n        const majorCols = Math.ceil(1200 / spacing);\n        const majorRows = Math.ceil(800 / spacing);\n        // Major vertical lines\n        for(let i = 0; i <= majorCols; i++){\n            elements.push(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"line\", {\n                x1: i * spacing,\n                y1: 0,\n                x2: i * spacing,\n                y2: 800,\n                stroke: \"currentColor\",\n                strokeWidth: \"1.5\",\n                opacity: opacity * 0.8\n            }, \"major-v-\".concat(i), false, {\n                fileName: \"/Users/brady/Code/tsg/Technology-Strategy-Group-Website/components/operate/BlueprintMicroGrid.tsx\",\n                lineNumber: 101,\n                columnNumber: 9\n            }, this));\n        }\n        // Major horizontal lines\n        for(let i = 0; i <= majorRows; i++){\n            elements.push(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"line\", {\n                x1: 0,\n                y1: i * spacing + scrollY,\n                x2: 1200,\n                y2: i * spacing + scrollY,\n                stroke: \"currentColor\",\n                strokeWidth: \"1.5\",\n                opacity: opacity * 0.8\n            }, \"major-h-\".concat(i), false, {\n                fileName: \"/Users/brady/Code/tsg/Technology-Strategy-Group-Website/components/operate/BlueprintMicroGrid.tsx\",\n                lineNumber: 117,\n                columnNumber: 9\n            }, this));\n        }\n        // Diagonal lines creating triangular sections\n        const diagonalLines = [\n            {\n                x1: 0,\n                y1: 0,\n                x2: 200,\n                y2: 200\n            },\n            {\n                x1: 200,\n                y1: 0,\n                x2: 0,\n                y2: 200\n            },\n            {\n                x1: 400,\n                y1: 0,\n                x2: 600,\n                y2: 200\n            },\n            {\n                x1: 600,\n                y1: 0,\n                x2: 400,\n                y2: 200\n            },\n            {\n                x1: 800,\n                y1: 0,\n                x2: 1000,\n                y2: 200\n            },\n            {\n                x1: 1000,\n                y1: 0,\n                x2: 800,\n                y2: 200\n            },\n            {\n                x1: 0,\n                y1: 200,\n                x2: 200,\n                y2: 400\n            },\n            {\n                x1: 200,\n                y1: 200,\n                x2: 0,\n                y2: 400\n            },\n            {\n                x1: 400,\n                y1: 200,\n                x2: 600,\n                y2: 400\n            },\n            {\n                x1: 600,\n                y1: 200,\n                x2: 400,\n                y2: 400\n            },\n            {\n                x1: 800,\n                y1: 200,\n                x2: 1000,\n                y2: 400\n            },\n            {\n                x1: 1000,\n                y1: 200,\n                x2: 800,\n                y2: 400\n            },\n            {\n                x1: 0,\n                y1: 400,\n                x2: 200,\n                y2: 600\n            },\n            {\n                x1: 200,\n                y1: 400,\n                x2: 0,\n                y2: 600\n            },\n            {\n                x1: 400,\n                y1: 400,\n                x2: 600,\n                y2: 600\n            },\n            {\n                x1: 600,\n                y1: 400,\n                x2: 400,\n                y2: 600\n            },\n            {\n                x1: 800,\n                y1: 400,\n                x2: 1000,\n                y2: 600\n            },\n            {\n                x1: 1000,\n                y1: 400,\n                x2: 800,\n                y2: 600\n            },\n            {\n                x1: 0,\n                y1: 600,\n                x2: 200,\n                y2: 800\n            },\n            {\n                x1: 200,\n                y1: 600,\n                x2: 0,\n                y2: 800\n            },\n            {\n                x1: 400,\n                y1: 600,\n                x2: 600,\n                y2: 800\n            },\n            {\n                x1: 600,\n                y1: 600,\n                x2: 400,\n                y2: 800\n            },\n            {\n                x1: 800,\n                y1: 600,\n                x2: 1000,\n                y2: 800\n            },\n            {\n                x1: 1000,\n                y1: 600,\n                x2: 800,\n                y2: 800\n            }\n        ];\n        diagonalLines.forEach((line, index)=>{\n            elements.push(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"line\", {\n                x1: line.x1,\n                y1: line.y1,\n                x2: line.x2,\n                y2: line.y2,\n                stroke: \"currentColor\",\n                strokeWidth: \"1\",\n                opacity: opacity * 0.6\n            }, \"diagonal-\".concat(index), false, {\n                fileName: \"/Users/brady/Code/tsg/Technology-Strategy-Group-Website/components/operate/BlueprintMicroGrid.tsx\",\n                lineNumber: 160,\n                columnNumber: 9\n            }, this));\n        });\n        // Dots at major grid intersections\n        for(let i = 0; i <= majorCols; i++){\n            for(let j = 0; j <= majorRows; j++){\n                elements.push(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                    cx: i * spacing,\n                    cy: j * spacing + scrollY,\n                    r: 1.5,\n                    fill: \"currentColor\",\n                    opacity: opacity * 0.9\n                }, \"dot-\".concat(i, \"-\").concat(j), false, {\n                    fileName: \"/Users/brady/Code/tsg/Technology-Strategy-Group-Website/components/operate/BlueprintMicroGrid.tsx\",\n                    lineNumber: 177,\n                    columnNumber: 11\n                }, this));\n            }\n        }\n        return elements;\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"absolute inset-0 pointer-events-none overflow-hidden \".concat(className),\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n            className: \"w-full h-full text-white\",\n            viewBox: \"0 0 1200 800\",\n            preserveAspectRatio: \"xMidYMid slice\",\n            children: generateBlueprintPattern()\n        }, void 0, false, {\n            fileName: \"/Users/brady/Code/tsg/Technology-Strategy-Group-Website/components/operate/BlueprintMicroGrid.tsx\",\n            lineNumber: 197,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/brady/Code/tsg/Technology-Strategy-Group-Website/components/operate/BlueprintMicroGrid.tsx\",\n        lineNumber: 193,\n        columnNumber: 5\n    }, this);\n}\n_s(BlueprintMicroGrid, \"ZPoL1qNsLGDANWfifMPxB108mHs=\");\n_c = BlueprintMicroGrid;\nvar _c;\n$RefreshReg$(_c, \"BlueprintMicroGrid\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/operate/BlueprintMicroGrid.tsx\n"));

/***/ })

});